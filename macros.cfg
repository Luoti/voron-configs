[gcode_macro GLOBAL]
variable_sounds: 1
variable_fanoverride: -1
variable_fanmaxoverride: -1
# 0 = Cooldown after print and turn off motors
# 1 = Cool down to additional probe and unload filament
# 2 = No cooldown or unload
variable_cooldownonendmode: 0
gcode:
  # must provide something
  M115

## Set RGB values on boot up for each Neopixel.
[delayed_gcode bootgcode]
initial_duration: 1
gcode:
  # Reset MMU groups at start
  MMU_REMAP_TTG reset=1
  MMU_ENDLESS_SPOOL reset=1

  UPDATE_LOGO_COLOR
  # Disable MMU by default
  #MMU enable=0
  #M117 MMU Disabled by default

[gcode_macro PRINT_START]
# Use PRINT_START for the slicer starting script
gcode:
  {% set BED = params.BED|default(0)|int %}
  {% set EXTRUDER = params.EXTRUDER|default(0)|int %}

  CLEAR_PAUSE

  M117 Start printing...
  #CASELIGHT B=1
  SET_TOOLHEAD_COLOR R=1.0 G=1.0 B=1.0
  {% if printer["gcode_macro GLOBAL"].sounds %}
    start_tunes
  {% endif %}

  # Start bed heating and continue
  M117 Preheat bed...
  {% if printer.heater_bed.temperature < params.BED|float*0.85 %}
      # wait till 0.85 of bed temp is reached, then continue
      M190 S{params.BED|float*0.85}
  {% endif %}

  M140 S{BED}

  # Preheat nozzle to 150c for probing
  #M117 Preheat nozzle...
  #{% if printer.extruder.temperature < 150 %}
  #  M109 S150 # Wait
  ;{% else %}
  ;  M104 S150 # Don't wait
  #{% endif %}

  G90 # Absolute positioning

  M117 Homing...

  # Do not home if already homed.
  {% if printer.toolhead.homed_axes != "xyz" or printer.quad_gantry_level.applied != True %}
    M109 S150 # Wait
    G32 # home all axes
  {% elif printer["gcode_macro GLOBAL"].cooldownonendmode != 2 %}
    # Not fastprint, do normal
    M109 S150 # Wait
    WIPE_NOZZLE
    G28 Z # Probe just the Z
  {% endif %}

  #BED_MESH_CALIBRATE ADAPTIVE=1

  # Move over the purge bucket to ooze
  MOVE_TO_PURGE_BUCKET
  G0 Z10

  {% if printer["gcode_macro GLOBAL"].sounds %}
    print_start_tune
  {% endif %}

  # In the end set temps
  M117 Heat bed...
  M190 S{BED}

  M117 Heat nozzle...

  # Extruder in the end to prevent oozing.
  M109 S{EXTRUDER}
  
  # Disable sensor first and enable it after 10 seconds
  #SET_FILAMENT_SENSOR SENSOR=ercf_encoder ENABLE=0
  #UPDATE_DELAYED_GCODE ID=ENABLE_ENCODER DURATION=10

# Overwrite MMU macro to check cooldownmode
[gcode_macro MMU_START_CHECK_CUSTOM]
gcode:
  {% if printer["gcode_macro GLOBAL"].cooldownonendmode != 2 || printer.mmu.filament != 'Loaded' %}
    MMU_START_CHECK {rawparams}
  {% endif %}

# Overwrite MMU macro to check cooldownmode
[gcode_macro MMU_START_LOAD_INITIAL_TOOL_CUSTOM]
gcode:
  {% if printer["gcode_macro GLOBAL"].cooldownonendmode != 2 || printer.mmu.filament != 'Loaded' %}
    MMU_START_LOAD_INITIAL_TOOL {rawparams}
  {% endif %}

# Final macro to after MMU stuff
[gcode_macro PRINT_START_FINAL]
gcode:
  
  # Purging here?

  # Wipe nozzle, if mmu is disabled. If mmu is enabled, it will wipe
  # nozzle after every tool change.
  {% if not printer.mmu.enabled %}
    WIPE_NOZZLE
  {% endif %}

  # Clear lcd to show coordinates
  M117  
  
  # Move to the center of the bed, before the start of the print
  G0 Z5 F27000
  G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F27000

[gcode_macro PRINT_END]
# Use PRINT_END for the slicer ending script
gcode:

  # MMU EJECT here, so we can disable if based on cooldownonendmode
  {% if printer["gcode_macro GLOBAL"].cooldownonendmode != 2 %}
    MMU_EJECT RESTORE=0
  {% endif %}

  # Safe anti-stringing move coords
  {% set th = printer.toolhead %}

  {% set z_safe = [th.position.z + 20, th.axis_maximum.z]|min %}

  M400 # wait for buffer to clear
  G92 E0 # zero the extruder
  G1 E-5.0 F1800 # retract filament

  G90 # absolute positioning
  G0 Z{z_safe} F20000 # move nozzle to remove stringing Z first!
  MOVE_TO_PURGE_BUCKET
  M107 # turn off fan
  
  BED_MESH_CLEAR

  {% if printer["gcode_macro GLOBAL"].sounds %}
      end_tunes
  {% endif %}

  # From happy-hare
  #{% set EJECT_FILAMENT = params.EJECT_FILAMENT|default(0)|int %}
  #{% if EJECT_FILAMENT|int == 1 %}
  #  MMU_EJECT
  #{% endif %}
  # /From happy-hare

  {% if printer["gcode_macro GLOBAL"].cooldownonendmode == 0 %}
    # Remove filament from the nozzle if powering off.
    M117 Cooldown on end. Powering off
    #G0 E-60 F1500 commented, this because forgot to insert the filament so many times.
    SOFT_POWEROFF
  {% elif printer["gcode_macro GLOBAL"].cooldownonendmode == 1 %}
    # Set to 150c for another g28z
    M104 S150
    M117 Finished! Temp to 150
  {% endif %}

  ;SET_TOOLHEAD_COLOR R=0.0 G=1.0 B=0.0
  ;CASELIGHT B=0.1
  SET_FAN_OVERRIDE S=-1
  SET_FAN_MAX_OVERRIDE S=-1
  ;SET_FAN_SPEED FAN=exhaust_fan SPEED=0

[gcode_macro CLEAN_NOZZLE]
variable_speed: 10000
gcode:
  # First, check if the axes are homed.
  {% if "xyz" in printer.toolhead.homed_axes %}

    # Save the gcode state in this macro instance.
    SAVE_GCODE_STATE NAME=clean_nozzle

    G90 # Absolute positioning
    {% if printer.toolhead.position.z < 30 %}
      G0 Z10 F{speed}
    {% endif %}
    G0 X{printer["gcode_macro _CLIENT_VARIABLE"].custom_park_x} Y{printer["gcode_macro _CLIENT_VARIABLE"].custom_park_y} F{speed}
    G0 Z1 F{speed}

    # Perform wipe
    G91 # relative positioning
    {% for wipes in range(1, 3) %}
      G0 X65 F{speed}
      #G0 Y-1.5 F{speed}
      G0 X-65 F{speed}
      #G0 Y1.5 F{speed}
    {% endfor %}

    M117 Cleaned!
  
    # Clear from area.
    G90 # Absolute positioning
    G1 Z5 F{speed}

    # Restore the gcode state to how it was before the macro.
    RESTORE_GCODE_STATE NAME=clean_nozzle

  {% else %}

    # raise error will stop any macros that clean_nozzle is referenced in from proceeding for safety.
    { action_raise_error("Please home your axes!") }
    M117 Please home first!

  {% endif %}

[gcode_macro WIPE_NOZZLE]
variable_speed: 10000
gcode:
  # First, check if the axes are homed.
  {% if "xyz" in printer.toolhead.homed_axes %}

    # Save the gcode state in this macro instance.
    SAVE_GCODE_STATE NAME=wipe_nozzle

    G90 # Absolute positioning
    {% if printer.toolhead.position.z < 30 %}
      G0 Z10 F{speed}
    {% endif %}
    G0 X{printer["gcode_macro _CLIENT_VARIABLE"].custom_park_x} Y{printer["gcode_macro _CLIENT_VARIABLE"].custom_park_y} F{speed}
    G0 Z1 F{speed}

    # Perform wipe
    G91 # relative positioning
    G0 X65 F{speed}

    M117 Wiped!
  
    # Clear from area.
    G90 # Absolute positioning
    G1 Z5 F{speed}

    # Restore the gcode state to how it was before the macro.
    RESTORE_GCODE_STATE NAME=wipe_nozzle

  {% else %}

    # raise error will stop any macros that wipe_nozzle is referenced in from proceeding for safety.
    { action_raise_error("Please home your axes!") }
    M117 Please home first!

  {% endif %}

[gcode_macro FILAMENT_RUNOUT]
gcode:
  ;{ action_raise_error("Filament error!") }
  M117 Filament error!
  {% if printer["gcode_macro GLOBAL"].sounds %}
    change_tune
  {% endif %}

[gcode_macro MOVE_TO_PURGE_BUCKET]
gcode:
  G90
  G0 X{printer["gcode_macro _CLIENT_VARIABLE"].custom_park_x} Y{printer["gcode_macro _CLIENT_VARIABLE"].custom_park_y} F27000

#################
# DELAYED STUFF #
#################

[delayed_gcode CLEAR_DISPLAY]
gcode:
  M117

#[delayed_gcode ENABLE_ENCODER]
#gcode:
  #SET_FILAMENT_SENSOR SENSOR=ercf_encoder ENABLE=1

#####################
# COLORS AND LIGHTS #
#####################

[gcode_macro SET_TOOLHEAD_COLOR]
gcode:
  {% set R = params.R|default(1)|float %}
  {% set G = params.G|default(1)|float %}
  {% set B = params.B|default(1)|float %}
  SET_LED LED=toolhead RED={R} GREEN={G} BLUE={B} INDEX=1 TRANSMIT=0
  SET_LED LED=toolhead RED={R} GREEN={G} BLUE={B} INDEX=2 TRANSMIT=0
  SET_LED LED=toolhead RED={R} GREEN={G} BLUE={B} INDEX=3 

# Accroding to the cooldownmode
[gcode_macro UPDATE_LOGO_COLOR]
gcode:
  {% if printer["gcode_macro GLOBAL"].cooldownonendmode == 0 %}
    _SET_LOGO_COLOR B=1
  {% elif printer["gcode_macro GLOBAL"].cooldownonendmode == 1 %}
    _SET_LOGO_COLOR R=1 G=1
  {% elif printer["gcode_macro GLOBAL"].cooldownonendmode == 2 %}
    _SET_LOGO_COLOR R=1
  {% endif %}

# Manual set
[gcode_macro _SET_LOGO_COLOR]
gcode:
  {% set R = params.R|default(0)|float %}
  {% set G = params.G|default(0)|float %}
  {% set B = params.B|default(0)|float %}
  SET_LED LED=toolhead RED={R} GREEN={G} BLUE={B} INDEX=1

#################
# BUTTON MACROS #
#################

[gcode_macro SET_FAN_OVERRIDE]
gcode:
  {% set S = params.S|default(-1)|int %}
  {% if S >= 0 %}
    {% set S = ((S / 100 * 255)|round|int) %}
    # Set the value with the original gcode when overriding
    M106.1 S{S}
  {% endif %}

  SET_GCODE_VARIABLE MACRO=GLOBAL VARIABLE=fanoverride VALUE={S}
  # Unset max
  SET_GCODE_VARIABLE MACRO=GLOBAL VARIABLE=fanmaxoverride VALUE=-1

[gcode_macro SET_FAN_MAX_OVERRIDE]
gcode:
  {% set S = params.S|default(-1)|int %}
  {% set OriginalS = S/100 %}
  {% if S >= 0 %}
    {% set S = ((S / 100 * 255)|round|int) %}
  {% endif %}

  # Set value to fan immediately, if it is smaller than current speed
  {% if OriginalS >= 0 and printer.fan.speed > OriginalS %}
    M106.1 S{S}
  {% endif %}

  SET_GCODE_VARIABLE MACRO=GLOBAL VARIABLE=fanmaxoverride VALUE={S}
  # Unset override
  SET_GCODE_VARIABLE MACRO=GLOBAL VARIABLE=fanoverride VALUE=-1

[gcode_macro ASK_COOLDOWN_ON_END_MODE]
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin What mode?"
    RESPOND TYPE=command MSG="action:prompt_text What mode to move to?"
    RESPOND TYPE=command MSG="action:prompt_button Full cooldown|SET_COOLDOWN_ON_END TARGET_MODE=0|info"
    RESPOND TYPE=command MSG="action:prompt_button Cooldown and eject|SET_COOLDOWN_ON_END TARGET_MODE=1|warning"
    RESPOND TYPE=command MSG="action:prompt_button FAST PRINT|SET_COOLDOWN_ON_END TARGET_MODE=2|error"
    RESPOND TYPE=command MSG="action:prompt_footer_button cancel|RESPOND TYPE=command MSG=action:prompt_end"
    RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro SET_COOLDOWN_ON_END]
gcode:
  {% set TARGET_MODE = params.TARGET_MODE|default(0)|int %}

  {% if TARGET_MODE == 0 %}
    SET_GCODE_VARIABLE MACRO=GLOBAL VARIABLE=cooldownonendmode VALUE=0
    M117 CooldownMode: FULL COOLDOWN
    { action_respond_info('CooldownMode: FULL COOLDOWN') }
    {% if printer["gcode_macro GLOBAL"].sounds %}
      M300 S500 P100
    {% endif %}
  {% elif TARGET_MODE == 1 %}
    SET_GCODE_VARIABLE MACRO=GLOBAL VARIABLE=cooldownonendmode VALUE=1
    M117 CooldownMode: Cooldown and eject
    { action_respond_info('CooldownMode: Cooldown and eject') }
    {% if printer["gcode_macro GLOBAL"].sounds %}
      M300 S750 P100
    {% endif %}
  {% elif TARGET_MODE == 2 %}
    SET_GCODE_VARIABLE MACRO=GLOBAL VARIABLE=cooldownonendmode VALUE=2
    M117 CooldownMode: FASTPRINT
    { action_respond_info('CooldownMode: FASTPRINT') }
    {% if printer["gcode_macro GLOBAL"].sounds %}
      M300 S1000 P100
    {% endif %}
  {% else %}
    M117 CooldownMode: NO TARGET SET
  {% endif %}
  UPDATE_LOGO_COLOR
  UPDATE_DELAYED_GCODE ID=CLEAR_DISPLAY DURATION=5

[gcode_macro CASELIGHT]
gcode:
  {% set B = params.B|default(1)|float %}
  SET_PIN pin=caselight VALUE={B}

[gcode_macro CASELIGHT_OFF]
gcode:
  CASELIGHT B=0

[gcode_macro TOOLHEAD_LIGHT]
gcode:
  {% set B = params.B|default(1)|float %}
  SET_TOOLHEAD_COLOR R={B} G={B} B={B}

[gcode_macro TOOLHEAD_LIGHT_OFF]
gcode:
  TOOLHEAD_LIGHT B=0

[gcode_macro SET_SOUND]
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin Sound"
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button ON|_SET_SOUND S=1|primary"
    RESPOND TYPE=command MSG="action:prompt_button OFF|_SET_SOUND S=0|secondary"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_footer_button cancel|RESPOND TYPE=command MSG=action:prompt_end"
    RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro _SET_SOUND]
gcode:
  {% set S = params.S|default(1)|int %}
  SET_GCODE_VARIABLE MACRO=GLOBAL VARIABLE=sounds VALUE={S}
  {% if S %}
    start_tunes
    M117 Sound on
  {% else %}
    M117 Sound off
  {% endif %}
  UPDATE_DELAYED_GCODE ID=CLEAR_DISPLAY DURATION=5

[gcode_macro PRESENT_HEAD]
gcode:
  G1 Z150 X175 Y30 F3000

[gcode_macro PRESENT_BED]
gcode:
  G0 Z100 F3000
  MOVE_TO_PURGE_BUCKET

[gcode_macro SOFT_POWEROFF]
gcode:
  TURN_OFF_HEATERS
  TOOLHEAD_LIGHT_OFF
  CASELIGHT_OFF
  # Turn off ALL fans. including the electronics case
  ;SET_FAN_SPEED FAN=exhaust_fan SPEED=0
  ;SET_FAN_SPEED FAN=chamber_fans SPEED=0
  # Turn off steppers
  MMU_SERVO pos=move
  M18

[gcode_macro REMOVE_FILAMENT]
gcode:
  SAVE_GCODE_STATE NAME=STATE_REMOVE_FILAMENT

  #SET_FILAMENT_SENSOR SENSOR=ercf_encoder ENABLE=0

  {% set ORIGINAL_TARGET = printer.extruder.target %}

  ;{% if printer.toolhead.homed_axes != "xyz" %}
  ;  G32 # home all axes
  ;{% endif %}

  ;PRESENT_HEAD

  {% if printer.extruder.temperature < 220 %}
    M109 S220 # Wait
  {% endif %}

  # Remove filament from the nozzle
  G0 E-50 F1500

  {% if printer["gcode_macro GLOBAL"].sounds %}
    end_tunes
  {% endif %}

  # Back to original temp
  M104 S{ORIGINAL_TARGET} # Don't wait

  # Does this restore temperatures, etc. ? Looks like not
  RESTORE_GCODE_STATE NAME=STATE_REMOVE_FILAMENT

##########
# SYSTEM #
##########

[gcode_macro G32]
gcode:
  SAVE_GCODE_STATE NAME=STATE_G32
  G90
  G28
  QUAD_GANTRY_LEVEL
  G28
  ;G0 X175 Y175 Z20 F3600
  G0 Z10 F3600
  RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro M300]
gcode:
  {% set S = params.S|default(1000)|int %} # S sets the tone frequency
  {% set P = params.P|default(100)|int %} # P sets the tone duration
  {% set L = 0.5 %} # L varies the PWM on time, close to 0 or 1 the tone gets a bit quieter. 0.5 is a symmetric waveform
  {% if S <= 0 %} # don't divide through zero
  {% set F = 1 %}
  {% set L = 0 %}
  {% elif S >= 10000 %} # max frequency set to 10kHz
  {% set F = 0 %}
  {% else %}
  {% set F = 1/S %} # convert frequency to seconds
  {% endif %}
  SET_PIN PIN=BEEPER_Pin VALUE={L} CYCLE_TIME={F} #Play tone
  G4 P{P} # tone duration
  SET_PIN PIN=BEEPER_Pin VALUE=0

[gcode_macro M600]
gcode:
  PAUSE X={printer["gcode_macro _CLIENT_VARIABLE"].custom_park_x} Y={printer["gcode_macro _CLIENT_VARIABLE"].custom_park_y} Z_MIN=50

[gcode_macro M106]
rename_existing: M106.1
gcode:
  # If we have override, do not set the fan value
  {% if printer["gcode_macro GLOBAL"].fanoverride < 0 %}
    M106.1 {rawparams}
  {% endif %}

  # If we have max override, we compare it to this
  {% if printer["gcode_macro GLOBAL"].fanmaxoverride > -1 and printer["gcode_macro GLOBAL"].fanmaxoverride < params.S|int %}
    M106.1 S{printer["gcode_macro GLOBAL"].fanmaxoverride}
  {% else %}
    M106.1 {rawparams}
  {% endif %}

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

##########
# OTHERS #
##########

# NOT IN USE
[gcode_macro FILAMENT_INSERT]
gcode:
    ;{ action_raise_error("Filament insert") }
    M117 Filament insert
    {% if printer["gcode_macro GLOBAL"].sounds %}
      start_tunes
    {% endif %}
    UPDATE_DELAYED_GCODE ID=CLEAR_DISPLAY DURATION=5

# Prime the nozzle
# NOT IN USE
[gcode_macro PRIME_LINE]
gcode: 
  SAVE_GCODE_STATE NAME=PRIME_NOZZLE_STATE
  M117 Priming
  G90 # Absolute coordinates.
  M83 # Relative extruder mode.
  G92 E0
  # Move to start of line.
  G1 Z10 F900
  G1 Y3 X3 F18000
  G1 Z0.2 F900
  # Print the line.
  G91 # Relative coordinates.
  G1 X100 E25 F1000 # Extrude filament 25mm (how much it retracted in PRINT_END).
  G1 Y-1 F1000
  G1 X-60 E9 F1000 # Print second part of the line.
  G1 E-0.5 F3000 # Retract to avoid stringing.
  G1 X0.5 E0 F1000 # Wipe back to break string.
  G1 X-5.5 E0 F1000 # Wipe forward to break string.
  RESTORE_GCODE_STATE NAME=PRIME_NOZZLE_STATE

[gcode_macro show_speed_fast]
gcode:
  G28 X0 Y0
  GET_POSITION
  G1 X0 Y0 F27000
  G1 X340 Y340 F27000
  G1 X0 Y0 F27000
  G1 X340 Y340 F27000

  G1 X0 Y340 F36000

  G1 X340 Y0 F27000
  G1 X0 Y340 F27000
  G1 X340 Y0 F27000
  G1 X0 Y340 F27000

  G1 X0 Y0 F36000
  G1 X340 Y0 F36000
  G1 X340 Y340 F36000
  G1 X0 Y340 F36000
  G1 X0 Y0 F36000
  G28 X0 Y0
  GET_POSITION